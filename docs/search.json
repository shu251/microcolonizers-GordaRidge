[
  {
    "objectID": "import-qc-metabarcoding.html",
    "href": "import-qc-metabarcoding.html",
    "title": "Process metabarcoding data",
    "section": "",
    "text": "R libraries\n\nlibrary(tidyverse)\nlibrary(phyloseq)\nlibrary(decontam)\n\n\nmerged_tax &lt;- read_delim(\"../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/data-input/taxonomy.tsv\", delim = \"\\t\")\n\nmerged_asv &lt;- read_delim(\"../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/data-input/microeuk-merged-asv-table.tsv\", delim = \"\\t\", skip = 1)\n\nmetadata &lt;- read.delim(\"../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/data-input/samplelist-metadata.txt\")\n \nasv_wtax &lt;- merged_asv %&gt;%\n  select(FeatureID = '#OTU ID', everything()) %&gt;%\n  pivot_longer(cols = !FeatureID,\n               names_to = \"SAMPLE\", values_to = \"value\") %&gt;%\n  left_join(merged_tax, by = c(\"FeatureID\" = \"Feature ID\")) %&gt;%\n  left_join(metadata) %&gt;%\n  filter(SITE == \"GordaRidge\" | SITE == \"substrate\" | SITE == \"Laboratory\") %&gt;%\n  filter(!grepl(\"Siders_\", SAMPLE)) %&gt;%\n  filter(!(grepl(\"T0\", SAMPLE))) %&gt;%\n  filter(!(grepl(\"T24\", SAMPLE))) %&gt;%\n  filter(!(grepl(\"T36\", SAMPLE))) %&gt;%\n  mutate(DATASET = case_when(\n    grepl(\"_GR_\", SAMPLE) ~ \"GR\",\n    grepl(\"Gorda\", SAMPLE) ~ \"GR\",\n    grepl(\"_MCR_\", SAMPLE) ~ \"MCR\",\n    grepl(\"Axial\", SAMPLE) ~ \"Axial\",\n  TRUE ~ \"Control or blank\")) %&gt;%\n    separate(Taxon, c(\"Domain\", \"Supergroup\",\n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\", remove = FALSE)\n\n# fix naming, some controls sequenced separately.\ngr_substrate_fluid_asvs &lt;- asv_wtax %&gt;%\n  mutate(SAMPLE_tmp = case_when(\n    Sample_actual == \"\" ~ SAMPLE,\n    TRUE ~ Sample_actual\n  )) %&gt;%\n  select(-SAMPLE) %&gt;%\n  select(SAMPLE = SAMPLE_tmp, everything()) %&gt;%\n  filter(value &gt; 0)\n\n# save(gr_substrate_fluid_asvs, file = \"input-data/gordaridge_18S_asvs.RData\")\n\n\n\n\n\n\nImport sample description text file, import as phyloseq library, and remove potential contaminate ASVs and sequences. Catalog total number of ASVs and sequences removed from analysis.\n\n\n\n# head(gr_substrate_fluid_asvs)\ntax_matrix &lt;- gr_substrate_fluid_asvs %&gt;% \n  select(FeatureID, Taxon) %&gt;% \n  distinct() %&gt;% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\", remove = FALSE) %&gt;% \n  column_to_rownames(var = \"FeatureID\") %&gt;% \n  as.matrix\n\nasv_matrix &lt;- gr_substrate_fluid_asvs %&gt;% \n  select(FeatureID, SAMPLE, value) %&gt;% \n  pivot_wider(names_from = \"SAMPLE\", values_fill = 0, values_from = value) %&gt;% \n  column_to_rownames(var = \"FeatureID\") %&gt;% \n  as.matrix\n\n# Align row names for each matrix\nrownames(tax_matrix) &lt;- row.names(asv_matrix)\n\nmetadata_cones &lt;- gr_substrate_fluid_asvs %&gt;% \n  select(SAMPLE, Type, VENT, SITE, SAMPLETYPE, Sample_or_Control) %&gt;% \n  distinct() %&gt;% \n  column_to_rownames(var = \"SAMPLE\")\n\n\n# Import asv and tax matrices\nASV = otu_table(asv_matrix, taxa_are_rows = TRUE)\nTAX = tax_table(tax_matrix)\nphylo_obj &lt;- phyloseq(ASV, TAX)\n\n# Import metadata as sample data in phyloseq\nsamplenames &lt;- sample_data(metadata_cones)\n\n# join as phyloseq object\nphyseq_wnames = merge_phyloseq(phylo_obj, samplenames)\n\n\n\n\nIn addition to shipboard milliQ blank samples, each substrate type had a ‘blank’ control, which was sampled at the same time, but never deployed in the microcolonizers (only processed at the same time in the lab).\n\n# When \"Control\" appears in \"Sample_or_Control column, this is a negative control\"\nsample_data(physeq_wnames)$is.neg &lt;- sample_data(physeq_wnames)$Sample_or_Control == \"Control\"\n\n\n# ID contaminants using Prevalence information\ncontam_prev &lt;- isContaminant(physeq_wnames, \n                               method=\"prevalence\", \n                               neg=\"is.neg\", \n                               threshold = 0.5, normalize = TRUE) \n\n# Report number of ASVs IDed as contamintants\ntable(contam_prev$contaminant)\n\n\n0.5 - this threshold will ID contaminants in all samples that are more prevalent in negative controls than in positive samples.\n\n\n\n\n\n# Subset contaminant ASVs\ncontams &lt;- filter(contam_prev, contaminant == \"TRUE\")\nlist_of_contam_asvs &lt;- as.character(row.names(contams))\n# length(list_of_contam_asvs)\n\ntaxa_contam &lt;- as.data.frame(tax_matrix) %&gt;% \n  rownames_to_column(var = \"FeatureID\") %&gt;% \n  filter(FeatureID %in% list_of_contam_asvs)\n# head(taxa_contam)\n\n\n# View(asv_wtax)\nasv_wtax_decon &lt;- gr_substrate_fluid_asvs %&gt;% \n  filter(!(FeatureID %in% list_of_contam_asvs)) %&gt;% \n  filter(!(Sample_or_Control == \"Control\"))\n\ntmp_orig &lt;- (gr_substrate_fluid_asvs %&gt;% filter(!(Sample_or_Control == \"Control\")))\n\n# Stats on lost\nx &lt;- length(unique(tmp_orig$FeatureID)); x\ny &lt;- length(unique(asv_wtax_decon$FeatureID)); y\n100*((y-x)/x) #0.43% of ASVs lost\na &lt;- sum(tmp_orig$value);a #3.1 million\nb &lt;- sum(asv_wtax_decon$value);b #2.89 million \n100*((b-a)/a)\n# Lost 5.5% of sequences from whole dataset.\n\n## Subsample to clean ASVs\nasv_wtax_wstats &lt;- gr_substrate_fluid_asvs %&gt;% \n  mutate(DECONTAM = case_when(\n    FeatureID %in% list_of_contam_asvs ~ \"FAIL\",\n    TRUE ~ \"PASS\"\n  ))\n\n\n\n\n\n\n# head(asv_wtax_wstats)\n\nasv_wtax_18 &lt;- asv_wtax_wstats |&gt; \n  filter(Sample_or_Control == \"Sample\") |&gt; \n  filter(DECONTAM == \"PASS\") |&gt; \n  select(SAMPLE, FeatureID, SEQUENCE_COUNT = value, Taxon, Domain,\n         Supergroup, Phylum, Class, Order, Family, Genus, Species, VENT, COORDINATES, SITE, SAMPLEID, SAMPLETYPE, DEPTH, temp, pH, percseawater, mg, h2, h2s, ch4, ProkConc, MC = Type) |&gt; \n  add_column(dataset = \"18S\") |&gt; \n  mutate(Substrate = case_when(\n    SAMPLETYPE == \"Microcolonizer\" ~ VENT\n  ))"
  },
  {
    "objectID": "import-qc-metabarcoding.html#decontaminate-sequence-library",
    "href": "import-qc-metabarcoding.html#decontaminate-sequence-library",
    "title": "Process metabarcoding data",
    "section": "",
    "text": "Import sample description text file, import as phyloseq library, and remove potential contaminate ASVs and sequences. Catalog total number of ASVs and sequences removed from analysis.\n\n\n\n# head(gr_substrate_fluid_asvs)\ntax_matrix &lt;- gr_substrate_fluid_asvs %&gt;% \n  select(FeatureID, Taxon) %&gt;% \n  distinct() %&gt;% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\", remove = FALSE) %&gt;% \n  column_to_rownames(var = \"FeatureID\") %&gt;% \n  as.matrix\n\nasv_matrix &lt;- gr_substrate_fluid_asvs %&gt;% \n  select(FeatureID, SAMPLE, value) %&gt;% \n  pivot_wider(names_from = \"SAMPLE\", values_fill = 0, values_from = value) %&gt;% \n  column_to_rownames(var = \"FeatureID\") %&gt;% \n  as.matrix\n\n# Align row names for each matrix\nrownames(tax_matrix) &lt;- row.names(asv_matrix)\n\nmetadata_cones &lt;- gr_substrate_fluid_asvs %&gt;% \n  select(SAMPLE, Type, VENT, SITE, SAMPLETYPE, Sample_or_Control) %&gt;% \n  distinct() %&gt;% \n  column_to_rownames(var = \"SAMPLE\")\n\n\n# Import asv and tax matrices\nASV = otu_table(asv_matrix, taxa_are_rows = TRUE)\nTAX = tax_table(tax_matrix)\nphylo_obj &lt;- phyloseq(ASV, TAX)\n\n# Import metadata as sample data in phyloseq\nsamplenames &lt;- sample_data(metadata_cones)\n\n# join as phyloseq object\nphyseq_wnames = merge_phyloseq(phylo_obj, samplenames)\n\n\n\n\nIn addition to shipboard milliQ blank samples, each substrate type had a ‘blank’ control, which was sampled at the same time, but never deployed in the microcolonizers (only processed at the same time in the lab).\n\n# When \"Control\" appears in \"Sample_or_Control column, this is a negative control\"\nsample_data(physeq_wnames)$is.neg &lt;- sample_data(physeq_wnames)$Sample_or_Control == \"Control\"\n\n\n# ID contaminants using Prevalence information\ncontam_prev &lt;- isContaminant(physeq_wnames, \n                               method=\"prevalence\", \n                               neg=\"is.neg\", \n                               threshold = 0.5, normalize = TRUE) \n\n# Report number of ASVs IDed as contamintants\ntable(contam_prev$contaminant)\n\n\n0.5 - this threshold will ID contaminants in all samples that are more prevalent in negative controls than in positive samples.\n\n\n\n\n\n# Subset contaminant ASVs\ncontams &lt;- filter(contam_prev, contaminant == \"TRUE\")\nlist_of_contam_asvs &lt;- as.character(row.names(contams))\n# length(list_of_contam_asvs)\n\ntaxa_contam &lt;- as.data.frame(tax_matrix) %&gt;% \n  rownames_to_column(var = \"FeatureID\") %&gt;% \n  filter(FeatureID %in% list_of_contam_asvs)\n# head(taxa_contam)\n\n\n# View(asv_wtax)\nasv_wtax_decon &lt;- gr_substrate_fluid_asvs %&gt;% \n  filter(!(FeatureID %in% list_of_contam_asvs)) %&gt;% \n  filter(!(Sample_or_Control == \"Control\"))\n\ntmp_orig &lt;- (gr_substrate_fluid_asvs %&gt;% filter(!(Sample_or_Control == \"Control\")))\n\n# Stats on lost\nx &lt;- length(unique(tmp_orig$FeatureID)); x\ny &lt;- length(unique(asv_wtax_decon$FeatureID)); y\n100*((y-x)/x) #0.43% of ASVs lost\na &lt;- sum(tmp_orig$value);a #3.1 million\nb &lt;- sum(asv_wtax_decon$value);b #2.89 million \n100*((b-a)/a)\n# Lost 5.5% of sequences from whole dataset.\n\n## Subsample to clean ASVs\nasv_wtax_wstats &lt;- gr_substrate_fluid_asvs %&gt;% \n  mutate(DECONTAM = case_when(\n    FeatureID %in% list_of_contam_asvs ~ \"FAIL\",\n    TRUE ~ \"PASS\"\n  ))"
  },
  {
    "objectID": "import-qc-metabarcoding.html#qc-18s-rrna-gene-dataset",
    "href": "import-qc-metabarcoding.html#qc-18s-rrna-gene-dataset",
    "title": "Process metabarcoding data",
    "section": "",
    "text": "# head(asv_wtax_wstats)\n\nasv_wtax_18 &lt;- asv_wtax_wstats |&gt; \n  filter(Sample_or_Control == \"Sample\") |&gt; \n  filter(DECONTAM == \"PASS\") |&gt; \n  select(SAMPLE, FeatureID, SEQUENCE_COUNT = value, Taxon, Domain,\n         Supergroup, Phylum, Class, Order, Family, Genus, Species, VENT, COORDINATES, SITE, SAMPLEID, SAMPLETYPE, DEPTH, temp, pH, percseawater, mg, h2, h2s, ch4, ProkConc, MC = Type) |&gt; \n  add_column(dataset = \"18S\") |&gt; \n  mutate(Substrate = case_when(\n    SAMPLETYPE == \"Microcolonizer\" ~ VENT\n  ))"
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Background",
    "section": "",
    "text": "Microcolonizers (or ‘cones’) were deployed at the Gorda Ridge hydrothermal vent field. Each microcolonizer was placed over a region of visible diffuse fluid flow. A total of 6 microcolonizers were depeloyed at one time, pairs of experiments were picked up after 6, 7, and 8 days.\nEach microcolonizer chamber had 6 different substrates, so that diffuse fluid could reach each substrate. Temperature loggers also recorded temperature for the duration of the deployments. Substrates included: shell, riftia shell, quartz, pyrite, basalt, and olivine.\n\n\n\n\n\nMicrocolonizers at Mt. Edwards vent site. Credit: Ocean Exploration Trust\n\n\n\n\n\n\n\n\n\nRecovering microcolonizers with ROV Hercules. Credit: Ocean Exploration Trust\n\n\n\n\nUpon recovery of each experiment, substrates were saved for microscopy and molecular analysis. For the sequence data below (shell, quartz, and riftia), RNA was extracted, cDNA was created and the V4 18S rRNA hypervariable region was amplified and sequenced. Blank substrates (which sat with milliQ during the shipboard processing) were also sequenced alongside the experimental treatments.\n\n\n\n\n\nOpening up microcolonizers after recovery. Credit: Mirmalek\n\n\n\n\n\n\n\nHow does the microcolonizer community compare to the background, plume, and diffuse fluid community? How does it compare to the resident or cosmpolitan community?\nIf shared, do we know if these species have specific traits that would enable them to settle? Are there any other unifying traits for species detected at the substrate vs. diffuse fluid?\nHow does the community composition change over deployment length? 6, 7, vs. 8 days? Does temperature play a role in this?\nWhat species are detected across substrate types? vs. only found at 1 type of substrate?\nFor specific taxa like ciliates and metazoa, that make up a large proportion of the substrate community, how does species richness and evenness compare across substrate vs. vent fluid?\nAre differences in community composition & diversity at the substrates similar with the 18S vs. 16S data?\nWhat are the most commonly occurring pairs of 16S and 18S amplicons?\n\nApproach * Explore above questions with molecular data, include a combined approach with 16S and 18S. Start with 18S rRNA gene tag-sequence data first. * Pinpoint a few samples to explore for microscopy? * A very cool goal would be to do the network analyses and characterization of community composition and then capture the same or related organisms microscopically. * Explore bodonids and related taxa, especially paying attention to parasites. * Also look for saprophytes (fungi) * Examine pictures closer and look for presence of potential parasites to the limpets, else?\nHypotheses\n\nIn a previous microcolonizer experiment where organic, iron-rich, vs. mineral substrates were placed at a hydrothermal vent site, the molecular analysis did not show a significant difference in the community composition across substrates (Lopez-Garcia et al.). They found that within only 2 weeks, microaerophilic bodonids and ciliatese pioneereed the colonization process.\nDiversity of protists included: bodonids (Kinetoplastida), alveolatees (specifically ciliates, Perkinsozoa, Group I), metazoa, fungi, and radiolaria. Many divergent eukaryotic lineages.\nIn the previous study, a similar composition of taxa were found in the surrounding vent fluid and settled on the substrate. But there wree different metazoa (mainly polychaetes)"
  },
  {
    "objectID": "background.html#core-questions-related-to-protists",
    "href": "background.html#core-questions-related-to-protists",
    "title": "Background",
    "section": "",
    "text": "How does the microcolonizer community compare to the background, plume, and diffuse fluid community? How does it compare to the resident or cosmpolitan community?\nIf shared, do we know if these species have specific traits that would enable them to settle? Are there any other unifying traits for species detected at the substrate vs. diffuse fluid?\nHow does the community composition change over deployment length? 6, 7, vs. 8 days? Does temperature play a role in this?\nWhat species are detected across substrate types? vs. only found at 1 type of substrate?\nFor specific taxa like ciliates and metazoa, that make up a large proportion of the substrate community, how does species richness and evenness compare across substrate vs. vent fluid?\nAre differences in community composition & diversity at the substrates similar with the 18S vs. 16S data?\nWhat are the most commonly occurring pairs of 16S and 18S amplicons?\n\nApproach * Explore above questions with molecular data, include a combined approach with 16S and 18S. Start with 18S rRNA gene tag-sequence data first. * Pinpoint a few samples to explore for microscopy? * A very cool goal would be to do the network analyses and characterization of community composition and then capture the same or related organisms microscopically. * Explore bodonids and related taxa, especially paying attention to parasites. * Also look for saprophytes (fungi) * Examine pictures closer and look for presence of potential parasites to the limpets, else?\nHypotheses\n\nIn a previous microcolonizer experiment where organic, iron-rich, vs. mineral substrates were placed at a hydrothermal vent site, the molecular analysis did not show a significant difference in the community composition across substrates (Lopez-Garcia et al.). They found that within only 2 weeks, microaerophilic bodonids and ciliatese pioneereed the colonization process.\nDiversity of protists included: bodonids (Kinetoplastida), alveolatees (specifically ciliates, Perkinsozoa, Group I), metazoa, fungi, and radiolaria. Many divergent eukaryotic lineages.\nIn the previous study, a similar composition of taxa were found in the surrounding vent fluid and settled on the substrate. But there wree different metazoa (mainly polychaetes)"
  },
  {
    "objectID": "index.html#process-ibutton-data",
    "href": "index.html#process-ibutton-data",
    "title": "home",
    "section": "3.1 Process ibutton data",
    "text": "3.1 Process ibutton data\n\nlist_mc &lt;- read.delim(\"input-data/microcolonizer_list.txt\")\nhead(list_mc)\n\nDeployment of all Microcolonizers was at 2019-05-29, 20:59:57.659 (UTC) (also 8:59 PM UTC), which is 4:59PM EST or 16:59 PM EST\nFunction to import all ibutton data raw and process.\n\n# Recovered microcolonizers by ibutton IDs:\n## 1, 2, 3, 4, 5, 6\nrecovered &lt;- c(\"2019-06-05 14:19:00\",\"2019-06-04 16:04:00\",\"2019-06-04 16:11:00\",\"2019-06-05 14:23:00\",\"2019-06-06 18:28:00\",\"2019-06-06 18:31:00\")\n# Sys.timezone()\n# tmp_2 &lt;- logger2 %&gt;% add_column(MC = 2)\n# \n# logger1 &lt;- read.csv(\"input-data/Logger1Data.csv\", skip = 19)\n# logger2 &lt;- read.csv(\"input-data/Logger2Data.csv\", skip = 19)\n# x &lt;- 1\nmc_ids &lt;- c(1, 2, 3, 4, 5, 6)\n\nfor(num in mc_ids){\n  log_file &lt;- read.csv(paste(\"input-data/Logger\", num, \"Data.csv\", sep = \"\"), skip = 19)  \n  cat(\"Reading in log file number\", num, \"\\n\")\n  log_out &lt;- log_file %&gt;% \n    add_column(MC = num) %&gt;% \n    mutate(Parsed_time_EST = parse_date_time(Date.Time, \"%m/%d/%y %H:%M:%S p\", tz = \"America/New_York\")) %&gt;%\n    # Filter out irrelevant date before deployment\n    filter(Parsed_time_EST &gt; \"2019-05-29 18:59:00\") %&gt;% \n    filter(\n      Parsed_time_EST &lt; recovered[[num]]\n    )\n  if(!exists(\"log_files_all\")){\n    log_files_all &lt;- log_out\n  } else{\n    log_files_all &lt;- bind_rows(log_files_all, log_out)\n  }\n}\n# rm(log_out); rm(log_files_all)\n# head(log_out)\n# View(log_files_all)\n\n\n# Factor by colors and pairs of MCs\nlog_files_all$MC_ORDER &lt;- factor(log_files_all$MC, levels = mc_ids)\nmc_col &lt;- c(\"#d7301f\", \"#4a1486\", \"#9e9ac8\", \"#fc8d59\", \"#2171b5\", \"#6baed6\")\nnames(mc_col) &lt;- mc_ids\n\nGraph microcolonizer temperatures.\n\nggplot(log_files_all, aes(x = Parsed_time_EST, y = Value, group = as.factor(MC_ORDER), color = as.factor(MC_ORDER))) +\n  geom_path() +\n  scale_color_manual(values = mc_col) +\n  theme_classic(base_size = 14) +\n  labs(x = \"\", y = \"Temperature •C\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.title = element_blank())\n\n\nTemperature data\n\ntemps &lt;- ggplot(log_files_all, aes(x = Parsed_time_EST, y = Value, color = as.factor(MC_ORDER))) +\n  geom_step() +\n  scale_color_manual(values = mc_col) +\n  theme_classic(base_size = 14) +\n  labs(x = \"\", y = \"Temperature •C\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.title = element_blank())\ntemps\n\n\nsave(log_files_all, file = \"input-data/temp-data.RData\")"
  },
  {
    "objectID": "analysis-microcolonizers.html",
    "href": "analysis-microcolonizers.html",
    "title": "microcolonizer analysis",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(phyloseq)\n\n\n\n\nload(\"input-data/GR_Microcolonizer_data.RData\", verbose = TRUE)\n\nLoading objects:\n  asv16s_df\n  asv_wtax_18\n\nload(\"input-data/temp-data.RData\", verbose = TRUE)\n\nLoading objects:\n  log_files_all\n\n\nasv_wtax_18 data includes 18S rRNA gene sequences from hydrothermal vents at Gorda Ridge and the microcolonizer substrates.\nasv16s_df same sample set as 18S, but with 16S rRNA gene sequences."
  },
  {
    "objectID": "analysis-microcolonizers.html#quarto",
    "href": "analysis-microcolonizers.html#quarto",
    "title": "microcolonizer analysis",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "analysis-microcolonizers.html#running-code",
    "href": "analysis-microcolonizers.html#running-code",
    "title": "microcolonizer analysis",
    "section": "2 Running Code",
    "text": "2 Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "import-qc-metabarcoding.html#import-all-16s-rrna-tag-data",
    "href": "import-qc-metabarcoding.html#import-all-16s-rrna-tag-data",
    "title": "Process metabarcoding data",
    "section": "2.1 Import all 16S rRNA tag data",
    "text": "2.1 Import all 16S rRNA tag data\nThis includes from Gorda Ridge and substrates.\n\ntax_16 &lt;- read_delim(\"input-data/taxonomy.tsv\", delim = \"\\t\")\n\n\nasv_16s_gr &lt;- read_delim(\"input-data/samples16s-asv-table.tsv\", delim = \"\\t\", skip = 1)\n# head(asv_16s_gr)\n\n\nasv16s_wtax &lt;- asv_16s_gr %&gt;%\n  select(FeatureID = '#OTU ID', everything()) %&gt;%\n  pivot_longer(cols = !FeatureID,\n               names_to = \"SAMPLEID_16S\", values_to = \"SEQUENCE_COUNT\") %&gt;%\n  left_join((tax_16 |&gt; select(FeatureID = `Feature ID`, Taxon)))\n\nImport and combine metadata files\n\nmetadata_16s &lt;- read.csv(\"input-data/manifest-16s.csv\")\nmetadata_vent &lt;- read_delim(\"input-data/ventnames-gordaridge-16S.txt\", delim = \"\\t\")\n\n# head(metadata_vent)\nmetadata_gr_16 &lt;- metadata_16s |&gt; \n  select(SAMPLEID_16S = `sample.id`, MC, Substrate) |&gt; \n  add_column(Sampletype = \"Microcolonizer\",\n             SAMPLE_AMY = \"Substrate 16S\") |&gt; \n  bind_rows(metadata_vent)\n\n\nasv16s_df &lt;- asv16s_wtax |&gt; \n  mutate(TAXON = str_replace_all(Taxon, \".__\", \"\")) |&gt; \n  separate(TAXON, into = c(\"Domain\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"), remove = FALSE, sep = \"; \") |&gt; \n  left_join(metadata_gr_16) |&gt; \n  mutate(MC = paste(\"MC\", MC, sep = \"\")) |&gt; \n  add_column(dataset = \"16S\")\n# head(asv16s_df)\n# unique(asv16s_df$Substrate)\n\n\nsave(asv16s_df, asv_wtax_18, file = \"input-data/GR_Microcolonizer_data.RData\")"
  },
  {
    "objectID": "analysis-microcolonizers.html#import-all-data",
    "href": "analysis-microcolonizers.html#import-all-data",
    "title": "microcolonizer analysis",
    "section": "",
    "text": "load(\"input-data/GR_Microcolonizer_data.RData\", verbose = TRUE)\n\nLoading objects:\n  asv16s_df\n  asv_wtax_18\n\nload(\"input-data/temp-data.RData\", verbose = TRUE)\n\nLoading objects:\n  log_files_all\n\n\nasv_wtax_18 data includes 18S rRNA gene sequences from hydrothermal vents at Gorda Ridge and the microcolonizer substrates.\nasv16s_df same sample set as 18S, but with 16S rRNA gene sequences."
  },
  {
    "objectID": "analysis-microcolonizers.html#plot-temperature-profiles-only",
    "href": "analysis-microcolonizers.html#plot-temperature-profiles-only",
    "title": "microcolonizer analysis",
    "section": "2.1 Plot temperature profiles only",
    "text": "2.1 Plot temperature profiles only\nGet temperature\n\n# head(log_files_all)\n# Factor by colors and pairs of MCs\nmc_ids &lt;- c(1, 2, 3, 4, 5, 6)\nlog_files_all$MC_ORDER &lt;- factor(log_files_all$MC, levels = mc_ids)\nmc_col &lt;- c(\"#d7301f\", \"#4a1486\", \"#9e9ac8\", \"#fc8d59\", \"#2171b5\", \"#6baed6\")\nnames(mc_col) &lt;- mc_ids\ntemps &lt;- ggplot(log_files_all, aes(x = Parsed_time_EST, y = Value, color = as.factor(MC_ORDER))) +\n  geom_step() +\n  scale_color_manual(values = mc_col) +\n  theme_classic(base_size = 14) +\n  labs(x = \"\", y = \"Temperature •C\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.title = element_blank())\ntemps"
  },
  {
    "objectID": "analysis-microcolonizers.html#join-temperature-and-tax-information",
    "href": "analysis-microcolonizers.html#join-temperature-and-tax-information",
    "title": "microcolonizer analysis",
    "section": "2.2 Join temperature and tax information",
    "text": "2.2 Join temperature and tax information\n\ntemp_row &lt;- ggplot(log_files_all, aes(x = Parsed_time_EST, y = Value, color = as.factor(MC_ORDER))) +\n  geom_step() +\n  scale_color_manual(values = mc_col) +\n  theme_classic(base_size = 14) +\n  facet_grid(rows = vars(MC_ORDER)) +\n  labs(x = \"\", y = \"Temperature •C\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.title = element_blank(),\n        legend.position = \"left\")\n\n\n# head(mc_16s)\nbac_row &lt;- mc_16s |&gt; \n  group_by(TAX_LEVEL, MC, Substrate) |&gt; \n  summarize(SUM = sum(SEQ_AVG)) |&gt; \n  ggplot(aes(x = Substrate, y = SUM, fill = TAX_LEVEL)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\") +\n  facet_grid(rows = vars(MC)) +\n  theme_classic(base_size = 14) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.title = element_blank(),\n        legend.position = \"none\")\n\n`summarise()` has grouped output by 'TAX_LEVEL', 'MC'. You can override using\nthe `.groups` argument.\n\nbac_row\n\n\n\n\n\n\n\n\n\n# head(mc_16s)\neuk_row &lt;- mc_18s |&gt; \n  group_by(TAX_LEVEL, MC, Substrate) |&gt; \n  summarize(SUM = sum(SEQ_AVG)) |&gt; \n  ggplot(aes(x = Substrate, y = SUM, fill = TAX_LEVEL)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\") +\n  facet_grid(rows = vars(MC)) +\n  theme_classic(base_size = 14) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.title = element_blank(),\n        legend.position = \"none\")\n\n`summarise()` has grouped output by 'TAX_LEVEL', 'MC'. You can override using\nthe `.groups` argument.\n\neuk_row\n\n\n\n\n\n\n\n\n\nlibrary(patchwork)\ntemp_row + bac_row + euk_row + patchwork::plot_layout(nrow = 1,widths = c(1, 0.8, 0.4))"
  },
  {
    "objectID": "analysis-microcolonizers.html#plot-species-richness-total-asvs-with-temperature",
    "href": "analysis-microcolonizers.html#plot-species-richness-total-asvs-with-temperature",
    "title": "microcolonizer analysis",
    "section": "2.3 Plot species richness (total ASVs) with temperature",
    "text": "2.3 Plot species richness (total ASVs) with temperature\nQuestion: Does overall species richness change within the microcolonizers? over “time” and with respect to temperature. Same for protists and prokaryotes?\nShow differences between microcolonizers with temperature.\ncontinuing question: if there are specific patterns in species richness for certain microcolonizers, are there certain species that are driving this pattern?"
  },
  {
    "objectID": "analysis-microcolonizers.html#eukaryotes",
    "href": "analysis-microcolonizers.html#eukaryotes",
    "title": "microcolonizer analysis",
    "section": "3.1 Eukaryotes",
    "text": "3.1 Eukaryotes\n\nhead(asv_wtax_18)\n\n# A tibble: 6 × 29\n  SAMPLE     FeatureID SEQUENCE_COUNT Taxon Domain Supergroup Phylum Class Order\n  &lt;chr&gt;      &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;\n1 GordaRidg… 00056209…              8 Euka… Eukar… Stramenop… Sagen… &lt;NA&gt;  &lt;NA&gt; \n2 GordaRidg… 00056209…             13 Euka… Eukar… Stramenop… Sagen… &lt;NA&gt;  &lt;NA&gt; \n3 GordaRidg… 00096455…             91 Euka… Eukar… Rhizaria   Radio… Acan… &lt;NA&gt; \n4 GordaRidg… 00165708…              1 Euka… Eukar… Stramenop… Ochro… Pela… Pela…\n5 GordaRidg… 0030ad8c…             36 Euka… Eukar… Stramenop… Opalo… MAST… MAST…\n6 GordaRidg… 0030ad8c…             12 Euka… Eukar… Stramenop… Opalo… MAST… MAST…\n# ℹ 20 more variables: Family &lt;chr&gt;, Genus &lt;chr&gt;, Species &lt;chr&gt;, VENT &lt;chr&gt;,\n#   COORDINATES &lt;chr&gt;, SITE &lt;chr&gt;, SAMPLEID &lt;chr&gt;, SAMPLETYPE &lt;chr&gt;,\n#   DEPTH &lt;chr&gt;, temp &lt;dbl&gt;, pH &lt;dbl&gt;, percseawater &lt;dbl&gt;, mg &lt;dbl&gt;, h2 &lt;chr&gt;,\n#   h2s &lt;dbl&gt;, ch4 &lt;dbl&gt;, ProkConc &lt;chr&gt;, MC &lt;chr&gt;, dataset &lt;chr&gt;,\n#   Substrate &lt;chr&gt;\n\nunique(asv_wtax_18$Domain)\n\n[1] \"Eukaryota\"  \"Bacteria\"   \"Unassigned\"\n\n\n\nmc_tmp_18 &lt;- asv_wtax_18 |&gt; \n  select(-SAMPLE) |&gt; \n  filter(SAMPLETYPE == \"Microcolonizer\" | VENT == \"Mt Edwards\" | VENT == \"Deep seawater\") |&gt; \n  filter(Domain == \"Eukaryota\") |&gt; \n  mutate(SUBSTRATE = str_replace_all(Substrate, \"z2\", \"z\")) |&gt; \n  mutate(SAMPLE = case_when(\n    SAMPLETYPE == \"Microcolonizer\" ~ paste(MC, SUBSTRATE, sep = \"-\"),\n    VENT == \"Deep seawater\" ~ \"Background seawater\",\n    VENT == \"Mt Edwards\" ~ \"Mt Edwards diffuse fluid\"\n  )) |&gt;\n  group_by(SAMPLE, FeatureID, Taxon, Domain, \n           Supergroup, Phylum, Class, Order, Family, Genus, Species) |&gt; \n  summarize(SEQ_AVG = mean(SEQUENCE_COUNT)) |&gt; \n  filter(SEQ_AVG &gt; 0)\n\n`summarise()` has grouped output by 'SAMPLE', 'FeatureID', 'Taxon', 'Domain',\n'Supergroup', 'Phylum', 'Class', 'Order', 'Family', 'Genus'. You can override\nusing the `.groups` argument.\n\n\nFilter by ASV size (sequence total for ASVs)\n\n# ASV filtering by how many sequences are present for each ASV\n## Total number of ASVs\nlength(unique(mc_tmp_18$FeatureID))\n\n[1] 2168\n\n# Total number of ASVs that have at least 500 sequences in one of the samples.\ntmp2 &lt;- mc_tmp_18 |&gt; \n  filter(SEQ_AVG &gt; 100)\n\nlength(unique(tmp2$FeatureID))\n\n[1] 450\n\nkeep_18 &lt;- as.character(unique(tmp2$FeatureID))\nlength(keep_18)\n\n[1] 450\n\n\nCreate filtered 18S dataset and convert to phyloseq object.\n\nhead(mc_tmp_18)\n\n# A tibble: 6 × 12\n# Groups:   SAMPLE, FeatureID, Taxon, Domain, Supergroup, Phylum, Class, Order,\n#   Family, Genus [6]\n  SAMPLE       FeatureID Taxon Domain Supergroup Phylum Class Order Family Genus\n  &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;\n1 Background … 00165708… Euka… Eukar… Stramenop… Ochro… Pela… Pela… Pelag… Pela…\n2 Background … 0038478b… Euka… Eukar… Opisthoko… Metaz… Cnid… Cnid… Hydro… &lt;NA&gt; \n3 Background … 0132268c… Euka… Eukar… Alveolata  Cilio… Spir… &lt;NA&gt;  &lt;NA&gt;   &lt;NA&gt; \n4 Background … 01a71ee7… Euka… Eukar… Stramenop… Pseud… MAST… MAST… MAST-… MAST…\n5 Background … 01d1a4a1… Euka… Eukar… Rhizaria   Radio… RAD-B RAD-… RAD-B… RAD-…\n6 Background … 02029510… Euka… Eukar… Rhizaria   Radio… RAD-B RAD-… RAD-B… RAD-…\n# ℹ 2 more variables: Species &lt;chr&gt;, SEQ_AVG &lt;dbl&gt;\n\nmat_18s_filtered &lt;- mc_tmp_18 |&gt; ungroup() |&gt; \n  filter(FeatureID %in% keep_18) |&gt; \n  filter(SEQ_AVG &gt; 0) |&gt; \n  select(FeatureID, SAMPLE, SEQ_AVG) |&gt; \n  pivot_wider(names_from = SAMPLE, values_from = SEQ_AVG, values_fill = 0) |&gt; \n  select(-`MC4-Shell`) |&gt; \n  column_to_rownames(var = \"FeatureID\") |&gt; \n  as.matrix()\n# colnames(mat_18s_filtered)\n\nmat_tax18_filtered &lt;- mc_tmp_18 |&gt; ungroup() |&gt; \n  filter(FeatureID %in% keep_18) |&gt; \n  select(FeatureID, Taxon, Domain, Phylum, Class, Order, Family, Genus, Species) |&gt; \n  distinct() |&gt; \n  column_to_rownames(var = \"FeatureID\") |&gt; \n  as.matrix()\n\nSPEIC-EASI network analysis requires samples to be in the same order. Additionally, the bacteria set of samples has more substrate options than the eukaryote dataset.\n\ncolnames(mat_18s_filtered)\n\n [1] \"Background seawater\"      \"MC1-Quartz\"              \n [3] \"MC1-Riftia\"               \"MC1-Shell\"               \n [5] \"MC2-Quartz\"               \"MC2-Riftia\"              \n [7] \"MC3-Riftia\"               \"MC3-Shell\"               \n [9] \"MC4-Quartz\"               \"MC5-Quartz\"              \n[11] \"MC5-Riftia\"               \"MC5-Shell\"               \n[13] \"MC6-Quartz\"               \"MC6-Riftia\"              \n[15] \"MC6-Shell\"                \"Mt Edwards diffuse fluid\"\n\nset_of_samples &lt;- colnames(mat_18s_filtered) # Make character list\n# class(set_of_samples)"
  },
  {
    "objectID": "analysis-microcolonizers.html#bacteria",
    "href": "analysis-microcolonizers.html#bacteria",
    "title": "microcolonizer analysis",
    "section": "3.2 Bacteria",
    "text": "3.2 Bacteria\nAs long as an ASV appears at least once to have more than 100 sequences, keep the ASV.\n\n# head(asv16s_df)\nmc_tmp &lt;- asv16s_df |&gt; \n  filter(Sampletype == \"Microcolonizer\" | LocationName == \"Mt Edwards Vent\" | LocationName == \"Deep seawater\" & STATUS == \"keep\") |&gt; \n  mutate(SAMPLE = case_when(\n    Sampletype == \"Microcolonizer\" ~ paste(MC, Substrate, sep = \"-\"),\n    LocationName == \"Deep seawater\" ~ \"Background seawater\",\n    LocationName == \"Mt Edwards Vent\" ~ \"Mt Edwards diffuse fluid\"\n  )) |&gt; \n  group_by(SAMPLE, FeatureID, Taxon, Domain, \n          Phylum, Class, Order, Family, Genus, Species) |&gt; \n  summarize(SEQ_AVG = mean(SEQUENCE_COUNT)) |&gt; \n  filter(!(Domain == \"Unassigned\") & !(Domain == \"Eukaryota\")) |&gt; \n  filter(SEQ_AVG &gt; 0)\n\n`summarise()` has grouped output by 'SAMPLE', 'FeatureID', 'Taxon', 'Domain',\n'Phylum', 'Class', 'Order', 'Family', 'Genus'. You can override using the\n`.groups` argument.\n\n# ASV filtering by how many sequences are present for each ASV\n## Total number of ASVs\nlength(unique(mc_tmp$FeatureID))\n\n[1] 5129\n\n# Total number of ASVs that have at least 100 sequences in one of the samples.\ntmptmp &lt;- mc_tmp |&gt; \n  filter(SEQ_AVG &gt; 100)\nlength(unique(tmptmp$FeatureID))\n\n[1] 1331\n\nkeep &lt;- as.character(unique(tmptmp$FeatureID))\nlength(keep)\n\n[1] 1331\n\n\n\nset_of_samples\n\n [1] \"Background seawater\"      \"MC1-Quartz\"              \n [3] \"MC1-Riftia\"               \"MC1-Shell\"               \n [5] \"MC2-Quartz\"               \"MC2-Riftia\"              \n [7] \"MC3-Riftia\"               \"MC3-Shell\"               \n [9] \"MC4-Quartz\"               \"MC5-Quartz\"              \n[11] \"MC5-Riftia\"               \"MC5-Shell\"               \n[13] \"MC6-Quartz\"               \"MC6-Riftia\"              \n[15] \"MC6-Shell\"                \"Mt Edwards diffuse fluid\"\n\nunique(tmptmp$SAMPLE)\n\n [1] \"Background seawater\"      \"MC1-Olivine\"             \n [3] \"MC1-Quartz\"               \"MC1-Riftia\"              \n [5] \"MC1-Shell\"                \"MC2-Basalt\"              \n [7] \"MC2-Olivine\"              \"MC2-Quartz\"              \n [9] \"MC2-Riftia\"               \"MC3-Basalt\"              \n[11] \"MC3-Olivine\"              \"MC3-Quartz\"              \n[13] \"MC3-Riftia\"               \"MC3-Shell\"               \n[15] \"MC4-Basalt\"               \"MC4-Pyrite\"              \n[17] \"MC4-Quartz\"               \"MC4-Riftia\"              \n[19] \"MC5-Basalt\"               \"MC5-Pyrite\"              \n[21] \"MC5-Quartz\"               \"MC5-Riftia\"              \n[23] \"MC5-Shell\"                \"MC6-Basalt\"              \n[25] \"MC6-Pyrite\"               \"MC6-Quartz\"              \n[27] \"MC6-Riftia\"               \"MC6-Shell\"               \n[29] \"Mt Edwards diffuse fluid\"\n\n\nCreate filtered 16S dataset and convert to phyloseq object.\n\n# head(mc_tmp)\nmat_16s_filtered &lt;- mc_tmp |&gt; ungroup() |&gt; \n  filter(FeatureID %in% keep) |&gt; \n  filter(SEQ_AVG &gt; 0) |&gt; \n  select(FeatureID, SAMPLE, SEQ_AVG) |&gt; \n  pivot_wider(names_from = SAMPLE, values_from = SEQ_AVG, values_fill = 0) |&gt; \n  ungroup() |&gt; \n  select(FeatureID, all_of(set_of_samples)) |&gt; \n  column_to_rownames(var = \"FeatureID\") |&gt; \n  as.matrix()\ncolnames(mat_16s_filtered)\n\n [1] \"Background seawater\"      \"MC1-Quartz\"              \n [3] \"MC1-Riftia\"               \"MC1-Shell\"               \n [5] \"MC2-Quartz\"               \"MC2-Riftia\"              \n [7] \"MC3-Riftia\"               \"MC3-Shell\"               \n [9] \"MC4-Quartz\"               \"MC5-Quartz\"              \n[11] \"MC5-Riftia\"               \"MC5-Shell\"               \n[13] \"MC6-Quartz\"               \"MC6-Riftia\"              \n[15] \"MC6-Shell\"                \"Mt Edwards diffuse fluid\"\n\nmat_tax_filtered &lt;- mc_tmp |&gt; ungroup() |&gt; \n  filter(FeatureID %in% keep) |&gt; \n  select(FeatureID, Taxon, Domain, Phylum, Class, Order, Family, Genus, Species) |&gt; \n  distinct() |&gt; \n  column_to_rownames(var = \"FeatureID\") |&gt; \n  as.matrix()\n\n\nidentical(colnames(mat_16s_filtered), colnames(mat_18s_filtered))\n\n[1] TRUE"
  },
  {
    "objectID": "analysis-microcolonizers.html#spearman-rank-correlation",
    "href": "analysis-microcolonizers.html#spearman-rank-correlation",
    "title": "microcolonizer analysis",
    "section": "6.1 Spearman Rank correlation",
    "text": "6.1 Spearman Rank correlation\nUse the same pared down data to perform a spearman correlation coefficient test.\n\nlibrary(compositions)\n\nWelcome to compositions, a package for compositional data analysis.\nFind an intro with \"? compositions\"\n\n\n\nAttaching package: 'compositions'\n\n\nThe following objects are masked from 'package:stats':\n\n    anova, cor, cov, dist, var\n\n\nThe following object is masked from 'package:graphics':\n\n    segments\n\n\nThe following objects are masked from 'package:base':\n\n    %*%, norm, scale, scale.default\n\n# CLR transform datasets individually and then anneal together.\ncombined_ASVs_clr &lt;- as.data.frame(t(compositions::clr(t(as.data.frame(mat_16s_filtered))))) %&gt;% \n  rownames_to_column(var = \"TMP\") %&gt;% \n  mutate(TMP_2 = paste(TMP, \"16S\", sep = \"_\")) %&gt;% \n  rbind(\n    (as.data.frame(t(compositions::clr(t(as.data.frame(mat_18s_filtered))))) %&gt;% \n  rownames_to_column(var = \"TMP\") %&gt;% \n  mutate(TMP_2 = paste(TMP, \"18S\", sep = \"_\")))\n  ) %&gt;% \n  column_to_rownames(var = \"TMP_2\") %&gt;% \n  select(-TMP)\n\nglimpse(combined_ASVs_clr)\n\nRows: 1,781\nColumns: 16\n$ `Background seawater`      &lt;dbl&gt; -1.2025536, -3.1484637, 0.3349718, -3.84161…\n$ `MC1-Quartz`               &lt;dbl&gt; 0.0000000, 0.0000000, 0.9688627, 0.0000000,…\n$ `MC1-Riftia`               &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000,…\n$ `MC1-Shell`                &lt;dbl&gt; 0.00000000, 0.00000000, 0.00000000, 0.00000…\n$ `MC2-Quartz`               &lt;dbl&gt; 0.0000000, 0.0000000, 0.2370333, 0.5658913,…\n$ `MC2-Riftia`               &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.0…\n$ `MC3-Riftia`               &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.0…\n$ `MC3-Shell`                &lt;dbl&gt; 0.0000000, 0.0000000, 0.0000000, 0.0000000,…\n$ `MC4-Quartz`               &lt;dbl&gt; 0.0000000, 0.0000000, -0.8885662, 0.0000000…\n$ `MC5-Quartz`               &lt;dbl&gt; 0.0000000, 0.0000000, 0.7677860, 0.0000000,…\n$ `MC5-Riftia`               &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.0…\n$ `MC5-Shell`                &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.0…\n$ `MC6-Quartz`               &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.0…\n$ `MC6-Riftia`               &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.0…\n$ `MC6-Shell`                &lt;dbl&gt; 0.000000, 0.000000, 0.000000, 0.000000, 0.0…\n$ `Mt Edwards diffuse fluid` &lt;dbl&gt; 0.0000000, 0.0000000, -0.1616575, 0.0000000…\n\n\nCalculate spearman correlation.\n\n# ?cor()\nspear_cor &lt;- cor(t(combined_ASVs_clr), method = \"spearman\")\n\nWarning in stats::cor(x, y, use, method): the standard deviation is zero\n\n\nspear_cor is a matrix that has all pairwise comparisons of ASVs to one another.\nSpearman’s rank correlation coefficient shows the ranking between two variables (all pairwise comparisons). Range of values is from -1 to 1. Values that are closer to -1 or 1 are the most opposed (-1) or most identical (+1).\nFor our analysis, we will look at comparisons that are &lt;-0.5 for negative relationships and and &gt;0.5 for positive relationships.\nRe-format data so it is meaningful\n\nspear_cor_output &lt;- as.data.frame(spear_cor) %&gt;% \n  rownames_to_column(var = \"PAIR_A\") %&gt;% \n  pivot_longer(cols = c(-PAIR_A), names_to = \"PAIR_B\", values_to = \"VALUE\")\n\n# head(spear_cor_output)\nhist(spear_cor_output$VALUE)\n\n\n\n\n\n\n\n\nStats on Spearman output\n\nglimpse(spear_cor_output)\n\nRows: 3,171,961\nColumns: 3\n$ PAIR_A &lt;chr&gt; \"04ecfad5772d2e09a84a0f5ef460536c_16S\", \"04ecfad5772d2e09a84a0f…\n$ PAIR_B &lt;chr&gt; \"04ecfad5772d2e09a84a0f5ef460536c_16S\", \"0562e97bf8665edd5ae858…\n$ VALUE  &lt;dbl&gt; 1.0000000, 1.0000000, -0.3539879, 0.7302967, -0.7302967, 0.4232…\n\nfiltered_spear_cor &lt;- spear_cor_output %&gt;% \n  filter((VALUE &gt; 0.75 | VALUE &lt; -0.75)) %&gt;% \n  filter(!(PAIR_A == PAIR_B))\nglimpse(filtered_spear_cor)\n\nRows: 18,622\nColumns: 3\n$ PAIR_A &lt;chr&gt; \"04ecfad5772d2e09a84a0f5ef460536c_16S\", \"04ecfad5772d2e09a84a0f…\n$ PAIR_B &lt;chr&gt; \"0562e97bf8665edd5ae85899297a44a8_16S\", \"09de3dde6c465b74bcb8e6…\n$ VALUE  &lt;dbl&gt; 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1…\n\n\n\nWe began with over 3 million comparisons.\nWe filtered by abs(0.75) and we are ending up with over 20,000 pairwise interactions to look at.\nAlso removed pairwise comparisons that are identical to one another.\nEnding with over 18k comparisons.\n\nInclude taxonomic information\n\ntaxa_key_combined &lt;- as.data.frame(mat_tax_filtered) %&gt;% \n  rownames_to_column(var = \"bac\") %&gt;% \n  mutate(FEATUREID = paste(bac, \"16S\", sep = \"_\")) %&gt;% \n  rbind((as.data.frame(mat_tax18_filtered) %&gt;% \n    rownames_to_column(var = \"bac\") %&gt;% \n    mutate(FEATUREID = paste(bac, \"18S\", sep = \"_\")))) %&gt;% \n  select(-bac)\n# head(taxa_key_combined)\n\nJoin with taxa information in step-wise fashion.\n\n# head(filtered_spear_cor)\nfiltered_spear_cor_wtax &lt;- filtered_spear_cor %&gt;% \n  left_join(taxa_key_combined, by = join_by(PAIR_A == FEATUREID)) %&gt;% \n  left_join(taxa_key_combined, by = join_by(PAIR_B == FEATUREID), suffix = c(\"_A\", \"_B\")) %&gt;% \n  # Adding interaction type at the domain level\n  mutate(INTERACTION_TYPE = paste(Domain_A, Domain_B, sep = \"-\")) %&gt;% \n  # Filtering again if phylum level is NA\n  filter(!(is.na(Phylum_A)) | !(is.na(Phylum_B)))\n\nhead(filtered_spear_cor_wtax)\n\n# A tibble: 6 × 20\n  PAIR_A PAIR_B VALUE Taxon_A Domain_A Phylum_A Class_A Order_A Family_A Genus_A\n  &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  \n1 04ecf… 0562e…     1 d__Bac… Bacteria Proteob… Alphap… Rhizob… Beijeri… Methyl…\n2 04ecf… 09de3…    -1 d__Bac… Bacteria Proteob… Alphap… Rhizob… Beijeri… Methyl…\n3 04ecf… 0f118…    -1 d__Bac… Bacteria Proteob… Alphap… Rhizob… Beijeri… Methyl…\n4 04ecf… 1040e…    -1 d__Bac… Bacteria Proteob… Alphap… Rhizob… Beijeri… Methyl…\n5 04ecf… 12696…    -1 d__Bac… Bacteria Proteob… Alphap… Rhizob… Beijeri… Methyl…\n6 04ecf… 12c4c…    -1 d__Bac… Bacteria Proteob… Alphap… Rhizob… Beijeri… Methyl…\n# ℹ 10 more variables: Species_A &lt;chr&gt;, Taxon_B &lt;chr&gt;, Domain_B &lt;chr&gt;,\n#   Phylum_B &lt;chr&gt;, Class_B &lt;chr&gt;, Order_B &lt;chr&gt;, Family_B &lt;chr&gt;,\n#   Genus_B &lt;chr&gt;, Species_B &lt;chr&gt;, INTERACTION_TYPE &lt;chr&gt;\n\nunique(filtered_spear_cor_wtax$INTERACTION_TYPE)\n\n[1] \"Bacteria-Bacteria\"   \"Bacteria-Archaea\"    \"Bacteria-Eukaryota\" \n[4] \"Archaea-Archaea\"     \"Archaea-Bacteria\"    \"Archaea-Eukaryota\"  \n[7] \"Eukaryota-Eukaryota\" \"Eukaryota-Archaea\"   \"Eukaryota-Bacteria\" \n\nglimpse(filtered_spear_cor_wtax)\n\nRows: 18,622\nColumns: 20\n$ PAIR_A           &lt;chr&gt; \"04ecfad5772d2e09a84a0f5ef460536c_16S\", \"04ecfad5772d…\n$ PAIR_B           &lt;chr&gt; \"0562e97bf8665edd5ae85899297a44a8_16S\", \"09de3dde6c46…\n$ VALUE            &lt;dbl&gt; 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1,…\n$ Taxon_A          &lt;chr&gt; \"d__Bacteria; p__Proteobacteria; c__Alphaproteobacter…\n$ Domain_A         &lt;chr&gt; \"Bacteria\", \"Bacteria\", \"Bacteria\", \"Bacteria\", \"Bact…\n$ Phylum_A         &lt;chr&gt; \"Proteobacteria\", \"Proteobacteria\", \"Proteobacteria\",…\n$ Class_A          &lt;chr&gt; \"Alphaproteobacteria\", \"Alphaproteobacteria\", \"Alphap…\n$ Order_A          &lt;chr&gt; \"Rhizobiales\", \"Rhizobiales\", \"Rhizobiales\", \"Rhizobi…\n$ Family_A         &lt;chr&gt; \"Beijerinckiaceae\", \"Beijerinckiaceae\", \"Beijerinckia…\n$ Genus_A          &lt;chr&gt; \"Methylobacterium-Methylorubrum\", \"Methylobacterium-M…\n$ Species_A        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Taxon_B          &lt;chr&gt; \"d__Bacteria; p__Deinococcota; c__Deinococci; o__Ther…\n$ Domain_B         &lt;chr&gt; \"Bacteria\", \"Bacteria\", \"Archaea\", \"Bacteria\", \"Bacte…\n$ Phylum_B         &lt;chr&gt; \"Deinococcota\", \"Actinobacteriota\", \"Crenarchaeota\", …\n$ Class_B          &lt;chr&gt; \"Deinococci\", \"Actinobacteria\", \"Nitrososphaeria\", \"A…\n$ Order_B          &lt;chr&gt; \"Thermales\", \"Corynebacteriales\", \"Nitrosopumilales\",…\n$ Family_B         &lt;chr&gt; \"Thermaceae\", \"Nocardiaceae\", \"Nitrosopumilaceae\", \"C…\n$ Genus_B          &lt;chr&gt; \"Thermus\", \"Rhodococcus\", \"Nitrosopumilaceae\", NA, \"C…\n$ Species_B        &lt;chr&gt; NA, NA, \"uncultured_marine\", NA, NA, NA, NA, NA, \"unc…\n$ INTERACTION_TYPE &lt;chr&gt; \"Bacteria-Bacteria\", \"Bacteria-Bacteria\", \"Bacteria-A…\n\n\n\nsave(filtered_spear_cor_wtax, file = \"output-data/spearman_output.RData\")"
  },
  {
    "objectID": "analysis-microcolonizers.html#other-networks",
    "href": "analysis-microcolonizers.html#other-networks",
    "title": "microcolonizer analysis",
    "section": "6.2 Other networks?",
    "text": "6.2 Other networks?\nGraphical lasso network: Non-paranormal transformation applied to data using huge.npn.\n\n# library(huge)\n\n\n# Run graphical lasso network\n# set.seed(100)\n# npn &lt;- huge.npn(netGAM5)\n# lams  &lt;- pulsar::getLamPath(pulsar::getMaxCov(npn), .01, len=30)\n# hugeargs &lt;- list(lambda=lams, verbose=FALSE, method='glasso')\n# outd &lt;- pulsar::pulsar(npn, fun=huge::huge, fargs=hugeargs,rep.num=50, criterion = \"stars\")\n# opt &lt;- outd$stars\n# n &lt;- opt$opt.index\n# # Get output adjacency matrix from graphical lasso model\n# fit &lt;- pulsar::refit(outd)\n# fit &lt;- fit$refit\n# fit.fin &lt;- fit$stars\n# fit.fin &lt;- as.matrix(fit.fin)\n# fit.fin &lt;- as.data.frame(fit.fin)\n# colnames(fit.fin) &lt;- colnames(netGAM5)\n# rownames(fit.fin)&lt;- colnames(netGAM5)\n# fit.fin &lt;- as.matrix(fit.fin)\n# \n# dim(fit.fin)"
  }
]